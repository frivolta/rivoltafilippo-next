{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/frivolta/Sites/Apps/rivoltafilippo-next/components/Input/input.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport InputWrapper from \"./input.style\";\n\nconst Input = (_ref) => {\n  let {\n    type,\n    label,\n    style,\n    disabled,\n    className,\n    secondaryComponent,\n    containerStyle,\n    name,\n    placeholder,\n    value,\n    onChange,\n    onBlur,\n    onFocus,\n    notification,\n    required,\n    ariaLabel\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"label\", \"style\", \"disabled\", \"className\", \"secondaryComponent\", \"containerStyle\", \"name\", \"placeholder\", \"value\", \"onChange\", \"onBlur\", \"onFocus\", \"notification\", \"required\", \"ariaLabel\"]);\n\n  // Add all classs to an array\n  const addAllClasses = [\"field-wrapper\"]; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add disabled class\n\n\n  if (disabled) {\n    addAllClasses.push(\"disabled\");\n  } // Init variable for Label For and Input element\n\n\n  let htmlFor, inputElement; // Make Label value to htmlFor\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, \"_\").toLowerCase();\n  } // Label Field\n\n\n  const labelField = label && /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: htmlFor,\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 31\n  }, this);\n\n  const notificationMessage = notification && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification\",\n    children: notification\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this); // Set Input element based on type prop\n\n\n  switch (type) {\n    case \"textarea\":\n      inputElement = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", _objectSpread({\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          style: style,\n          value: value,\n          onChange: onChange,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          placeholder: placeholder,\n          required: required,\n          \"aria-label\": name || ariaLabel\n        }, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n      break;\n\n    default:\n      inputElement = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({\n          type: type,\n          id: htmlFor,\n          disabled: disabled,\n          style: style,\n          name: name,\n          value: value,\n          onChange: onChange,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          placeholder: placeholder,\n          required: required,\n          \"aria-label\": name || ariaLabel\n        }, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this);\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(InputWrapper, {\n    className: `${addAllClasses.join(\" \")}`,\n    style: containerStyle,\n    children: [labelField || secondaryComponent ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [labelField, \" \", secondaryComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : \"\", inputElement, notificationMessage]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/frivolta/Sites/Apps/rivoltafilippo-next/components/Input/input.tsx"],"names":["React","InputWrapper","Input","type","label","style","disabled","className","secondaryComponent","containerStyle","name","placeholder","value","onChange","onBlur","onFocus","notification","required","ariaLabel","props","addAllClasses","push","htmlFor","inputElement","replace","toLowerCase","labelField","notificationMessage","join"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport InputWrapper from \"./input.style\"\r\n\r\ntype InputProps = {\r\n  id?: any\r\n  type?: string\r\n  disabled?: boolean\r\n  label?: string\r\n  style?: React.CSSProperties\r\n  containerStyle?: React.CSSProperties\r\n  className?: string\r\n  secondaryComponent?: React.ReactChild | React.ReactChildren // this prop only for number field\r\n  name?: string\r\n  placeholder?: string\r\n  value?: string\r\n  onChange?: (e: any) => void\r\n  onBlur?: (e: any) => void\r\n  onFocus?: (e: any) => void\r\n  notification?: string\r\n  required?: boolean\r\n  ariaLabel?: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({\r\n  type,\r\n  label,\r\n  style,\r\n  disabled,\r\n  className,\r\n  secondaryComponent,\r\n  containerStyle,\r\n  name,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  onFocus,\r\n  notification,\r\n  required,\r\n  ariaLabel,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses: string[] = [\"field-wrapper\"]\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className)\r\n  }\r\n\r\n  // Add disabled class\r\n  if (disabled) {\r\n    addAllClasses.push(\"disabled\")\r\n  }\r\n\r\n  // Init variable for Label For and Input element\r\n  let htmlFor, inputElement\r\n\r\n  // Make Label value to htmlFor\r\n  if (label) {\r\n    htmlFor = label.replace(/\\s+/g, \"_\").toLowerCase()\r\n  }\r\n\r\n  // Label Field\r\n  const labelField = label && <label htmlFor={htmlFor}>{label}</label>\r\n  const notificationMessage = notification && (\r\n    <div className=\"notification\">{notification}</div>\r\n  )\r\n\r\n  // Set Input element based on type prop\r\n  switch (type) {\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <div className=\"inner-wrap\">\r\n          <textarea\r\n            id={htmlFor}\r\n            name={name}\r\n            disabled={disabled}\r\n            style={style}\r\n            value={value}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            onFocus={onFocus}\r\n            placeholder={placeholder}\r\n            required={required}\r\n            aria-label={name || ariaLabel}\r\n            {...props}\r\n          />\r\n        </div>\r\n      )\r\n      break\r\n\r\n    default:\r\n      inputElement = (\r\n        <div className=\"inner-wrap\">\r\n          <input\r\n            type={type}\r\n            id={htmlFor}\r\n            disabled={disabled}\r\n            style={style}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            onFocus={onFocus}\r\n            placeholder={placeholder}\r\n            required={required}\r\n            aria-label={name || ariaLabel}\r\n            {...props}\r\n          />\r\n        </div>\r\n      )\r\n      break\r\n  }\r\n\r\n  return (\r\n    <InputWrapper\r\n      className={`${addAllClasses.join(\" \")}`}\r\n      style={containerStyle}\r\n    >\r\n      {labelField || secondaryComponent ? (\r\n        <div>\r\n          {labelField} {secondaryComponent}\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {inputElement}\r\n      {notificationMessage}\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default Input\r\n"]},"metadata":{},"sourceType":"module"}